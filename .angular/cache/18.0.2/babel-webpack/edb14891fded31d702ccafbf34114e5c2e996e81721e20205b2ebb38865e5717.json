{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'https://jsonplaceholder.typicode.com/users'; // API მისამართი\n    }\n    register(username, email, password) {\n      const user = {\n        username,\n        email,\n        password,\n        role: 'User'\n      }; // ან 'Admin' როლი თუ გინდათ\n      localStorage.setItem('user', JSON.stringify(user)); // მონაცემების შენახვა Local Storage-ში\n      return of(user); // მხოლოდ ტესტისთვის, დააბრუნეთ Observable ობიექტი\n    }\n    login(email, password) {\n      const user = JSON.parse(localStorage.getItem('user'));\n      if (user && user.email === email && user.password === password) {\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        return of(user);\n      } else {\n        return of({\n          error: 'Invalid credentials'\n        });\n      }\n    }\n    logout() {\n      localStorage.removeItem('currentUser');\n    }\n    isLoggedIn() {\n      return !!localStorage.getItem('currentUser');\n    }\n    handleError(operation = 'operation', result) {\n      return error => {\n        console.error(error);\n        return of(result);\n      };\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}