{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../core/services/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/material/form-field\";\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(fb, authService, router) {\n      this.fb = fb;\n      this.authService = authService;\n      this.router = router;\n      this.loginForm = this.fb.group({\n        email: ['', [Validators.required, Validators.email]],\n        password: ['', Validators.required]\n      });\n    }\n    onSubmit() {\n      if (this.loginForm.valid) {\n        const {\n          email,\n          password\n        } = this.loginForm.value;\n        console.log('ავტორიზაცია ხდება:', {\n          email,\n          password\n        });\n        this.authService.login(email, password).subscribe(response => {\n          if (response.error) {\n            console.error('ავტორიზაცია ვერ მოხერხდა:', response.error);\n          } else {\n            console.log('ავტორიზაცია წარმატებულია');\n            this.router.navigate(['/users']);\n          }\n        }, error => {\n          console.error('ავტორიზაცია ვერ მოხერხდა', error);\n        });\n      }\n    }\n    static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n      return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LoginComponent,\n      selectors: [[\"app-login\"]],\n      decls: 15,\n      vars: 1,\n      consts: [[3, \"ngSubmit\", \"formGroup\"], [\"matInput\", \"\", \"formControlName\", \"username\"], [\"matInput\", \"\", \"formControlName\", \"email\"], [\"matInput\", \"\", \"type\", \"password\", \"formControlName\", \"password\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\"]],\n      template: function LoginComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0);\n          i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_0_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(1, \"mat-form-field\")(2, \"mat-label\");\n          i0.ɵɵtext(3, \"Username\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(4, \"input\", 1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"mat-form-field\")(6, \"mat-label\");\n          i0.ɵɵtext(7, \"Email\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(8, \"input\", 2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"mat-form-field\")(10, \"mat-label\");\n          i0.ɵɵtext(11, \"Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(12, \"input\", 3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"button\", 4);\n          i0.ɵɵtext(14, \"Login\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        }\n      },\n      dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i4.MatButton, i5.MatInput, i6.MatFormField, i6.MatLabel]\n    });\n  }\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}